load(7,1); //load exception handler from blocks 1 and 2 to memory pages 7 and 8
load(8,2);
load(23,17); //load interrupt routine 7 from blocks 17 and 18 to pages 23 and 24
load(24,18);

[READY_LIST + 0] = 0; //set pid of the init process to 0

load(25,21); //load the code of the init program
load(26,22);
load(27,23); 

PTBR = 1024; //Since init process has pid 0, its ptbr is set to 1024
PTLR = 4; //Every process has 4 entries in its page table

[PTBR + 0] = 25; //Physical page number for logical page 0
[PTBR + 1] = "01"; //auxilary info for logical page 0
[PTBR + 2] = 26;
[PTBR + 3] = "01";
[PTBR + 4] = 27;
[PTBR + 5] = "01";
[PTBR + 6] = 28; //for the stack
[PTBR + 7] = "01";

load(9,3); //load timer interrupt routine
load(10,4); 

[READY_LIST + 1] = 2; //the pcb of the init process states that it is running

SP = 3*512; //The stack pointer points to the fourth logical page (since it is used by user programs)

[28*512] = 0; //set up the IP value for init at the top of the stack

load(11,5); //load interrupt 1 routine
load(12,6); 

load(5,19); //load fat 
load(6,20); //load df

alias counter S0;
counter = 0;

while(counter < 128) do //Initialize the sys-wide open file table
	[FILE_TABLE + counter + 0] = -1; //Set FAT index of sys-wide open file table to invalid
	[FILE_TABLE + counter + 1] = 0; //File open count is 0
	counter = counter + 2;
endwhile;

counter = 0;

load(13,7);
load(14,8);
load(15,9);
load(16,10);
load(17,11);
load(18,12);
load(19,13);
load(20,14);
load(21,15);
load(22,16);
load(23,17);
load(24,18);

while(counter < 16) do //initialize per-process open file table of the init process to invalids
	[READY_LIST + 15 + counter] = -1;
	[READY_LIST + 15 + counter + 1] = -1;
	counter = counter + 2;
endwhile;

counter = 1280; //initializing the memory free list
while(counter<=1343) do
	[counter] = 0;
	counter = counter + 1;
endwhile;
counter = 1280;
while(counter<=1280+28) do
	[counter] = 1;
	counter = counter + 1;
endwhile;

counter = 0;
while(counter<32) do
	[READY_LIST + counter*32 + 1] = 0; //set the state field of each process to 0
	counter = counter + 1;
endwhile;

[READY_LIST + 1] = 2;
	

ireturn; //transfer control to the user program






